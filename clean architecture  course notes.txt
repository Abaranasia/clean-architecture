CLEAN ARCHITECTURE

KEY IDEAS:
	- Technology <--> Ports/controllers <--> Use Cases <--> Domain respecting the dependecy inversion
	- Use cases should be executable from terminal

1. Domain: contains the business rules of the Application; divided into app business rules and enterprise business rules
  - Entities
  - Value-objects

High level dependencies: related with business

Low level dependencies: relateds with implementation

abstraction don't depend on implementation
abstraction is defined by the owner

Business includes now a repository abstraction (an interface) to communicate with the implementation that connects to repositories

In Clean code, the business logic, defined by entities and value-objects, is the inner core and should be defined with primitives. This way the core logic of the application is way easier to test and can be independent of the UI

Entities:
	- related data that forms concepts
	- simple concepts with invariants
	- should be composed by business rules 
	- created in pure language (not frameworks) 
	- This makes it reusable among technologies
	- Changes infrequently (technology does rapidly)

value-objects

Entities																		Value-objects (part of an entity)
 - mutable with identity (need id)		 			- Inmutable types without identity (don't have id)
 - validate invariants on business logic	 	- represent specific types of our domain
 - Instances should be compared beyond id	 	- require equal functions to allow instance comparations


2. Use cases (interactors): 
	- Their main pupose is coordinate
	- Every action or functionality should be isolated in a class and communicate with the entities. 
	- Made of pure language (no libs)
	- It's reusable
	- Starts always with a verb (getById, ..)
	- translators like mongoose, motor, etc

3. Ports: 
	- Are interface adapters added inbetween domain and UI or persistent layers
	- SHould not expose the entities to extermal layers, but will imply a lot of noise and complexity
- Application user rules 
- Enterprise rules: independent rules

	
4. Frameworks and Drivers:
	- this layer changes frequently
	- Could be UI, modules (coupled to libs), or DB connectors
